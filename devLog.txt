//=================================== Tasks
innerHtml insertAdjacentHTML moashore DONE
ukan unda gadmoyves username roca chatidan gamodis DONE
validacia chatshi saxelis gareshe ver unda shediodes DONE
chemi da sxvisi mesijebi sxvadasxvanairad unda ifiltrebodes DONE

getter ebze gadaakete static fieldebi
pirdapir chatis linkze access ar unda qondes
ramdeni player ia shemosuli DONE
kodis shelamazeba 
weback build

//=================================== Q/A
Q: am I gvinig data to component correctly?
  A: idk
Q: can I give data to component in props maybe object
  A: in lit-element you can
Q: using Id's in web component styling
  A: no problem

Q: room-card event
  A: throwing custom elements to bind data from child to parent
Q: custom element event bubble up
  A: event won't bubble up by default if respective option is not assgined
Q: cannot read attribute set on custom element <room-card href="/chat">
  A: you have to declare it inside component to access like that
Q: connectedcallback doesnot see DOM
  A:yea, you would better read liveCycle of lit-element


Q: getting data of slotted element this.shadowRoot.getElementById('mode').assignedNodes()[0].data is there any fancier method?
Q: can I make mongo query not async? so I wont need to use .then
Q: alter .then with await?
Q: global styles override component styles * margin


//=================================== Q/A Codes
Q: LIMIT DOESNOT WORK LIKE this
let cursor = await collection.aggregate({
      "$match": {
        room: room
      }
    },
    {
      "$project": {
        chatHistory: 1,
        _id: 0
      }
    },
    {
      "$unwind": "$chatHistory"
    },
    {
      "$limit": 2
    })
A: it just needed [] square brackets to make limit stage work!!!

//=================================== Modified working code 

       let renderMessage = (messages) => {

            messages.forEach((msg)=>{
                let msgDiv = document.createElement('user-message');
                msgDiv.props = msg;
                messagesDiv.appendChild(msgDiv);
            })
        }
    }

//sisulelea chatHistory array sul icvleba da shen mainc bolodan 10 15 20 .. poziciidan amokrefili elementebi mogaq
    {
      "$project": {
        "message": {
          "$slice": ["$chatHistory",-limit*timesBack, { "$cond": [{ $gt: [limit*timesBack, {"$size": "$chatHistory"} ]},null,limit] }]
           //$$!! if position is more then array elements empty array is returned, we loose some starting messages
        },
        _id: 0
      }
    },
//igivea sulelo arraySize icvleba da oriveshemtxvevashi magaze damokidebuli xar
{
    "$project": {
    "message": {
        "$slice": ["$chatHistory",{"$subtract":[{"$size":"$chatHistory"},limit*timesBack]}, { "$cond": [{ $gt: [limit*timesBack, {"$size": "$chatHistory"} ]},null,limit] }]
        //$$!! if position is more then array elements empty array is returned, we loose some starting messages
    },
    _id: 0
    }
},

//ramenairad pirveli getMessages dros (join rocaxdeba) magdrois chatHistory size unda sheinaxo yvela useristvis shesabamisi
da shemdeg am cvladis mixedvit ukan ukan gadmoxvide poziciebi
//gmerto shenmishvele rato vitanjav tavs, ase mushaobs magram bagi aqvs sul magla amosvlisas
  "message": {
          "$slice": ["$chatHistory",loadPos, { "$cond": [{ $gt: [limit*timesBack, {"$size": "$chatHistory"} ]},null,limit] }]
           //$$!! if position is more then array elements empty array is returned, we loose some starting messages
        },
        _id: 0
      }

//----------------------------------------------------------------------

//Q: Updates with Aggregation Pipeline, aq update shi agregacia ro gavushvat da ramenairad historySize vtenot ar sheidzleba?
  await collection.updateOne({room: room}, 
    { 
        $push: { 
          activeUsers: {
            id:id,
            userName:userName,
            room:room,
            "$set":{historySize:{$"size":"$chatHistory"}}
          }
        }
    },{upsert:true})
}

//=================================== Removed codes

//emit all messages to client, check for userData and send its details also 
    // response.forEach(msg => {
    //   socket.emit('chatMessage',createMessage(message.user, message.text, message.date)); 
    // });

//send data to web component
    //method: 3 give it through props
    msgDiv.props = msgProps;
    /*    
    //method: 1 give it through custom html data attributes
    // setAttributes(msgDiv, {
    //     'data-userimg': msgProps.img,
    //     'data-username': msgProps.name,
    //     'data-usermsg': msgProps.text,
    //     'data-msgdate': msgProps.date,
    // })
        
    //method: 2 give it thorugh slots
    // msgDiv.innerHTML =` 
    //     <slot name="userImg"></slot>
    //    P <slot name="msgText">${msg}</slot>
    //     <slot name="msgDate"></slot>    
    // `;
    */

//navigator buttons
    document.getElementsByName('route-link).forEach(element=>{
        element.addEventListener('click',(event)=>{
                event.preventDefault();
                App.navigateTo(event.currentTarget.href)
            }
        )
    })

//dispatching custom event
    this.addEventListener('click', ()=>{
        let event = new CustomEvent('route-click', {
            detail: {
                gameMode: this.shadowRoot.getElementById('mode').assignedNodes()[0].data
            }
            });
            this.dispatchEvent(event);
    })
    
//set routes to component

    <a href="/chat" name="route-link" >
        <room-card >Time Mode</room-card>
    </a>
    <a href="/chat" name="route-link" >
        <room-card >Hit Mode</room-card>
    </a>
    <a href="/chat" name="route-link" >
        <room-card >Eat Mode</room-card>
    </a>

    <room-card href="/chat" name="route-link" >Time Mode</room-card>
    <room-card href="/chat" name="route-link" >Hit Mode</room-card>
    <room-card href="/chat" name="route-link" >Eat Mode</room-card>

//shorthand object implementation is confusing for debugging    
.updateOne({room: room}, 
    { 
        $push: { 
          activeUsers: {
            id, userName, room  //this is shorthand, it will make given variables as object field names
          }
        }
    },{upsert:true})

//==================== Achived functions
    const setAttributes = (element, attributesObject) => {
        console.log(attributesObject);
        for (var key in attributesObject) {
            element.setAttribute(key, attributesObject[key]);
        }
    }
well there are two algorithms I can think of how snake should move:

1. on every movement left,righ.. just add new cell and delete last cell
this way cells don't really need to know their future positions, no cells will move just add & delete

    drawback: adding and deleting cells means adding new "div" and removing last cell "div" from DOM, not a good idea

2. make an snakeTrail array, where we will have coordinates of each cell, and on every movement just add new positions to array
remove last positions , and than update all cells so they render on their new positions

    drawback: well if you have really long snake, you have to change position forEach cell at every single damn tick

3. oh actually i can think third way, on every movement just move last cell to new position left, right ...
    cell positions will be updated in array, and in DOM we wont have to change anything, just somehow manipulate "div" positions right way
    oh just save which div is positioned now Last, which nth child

    drawback: I don't know it yet :D 

4. as we need head cell to be static, because of eyes and decorations, I should modify method:3, by just moving last tail cell to 
    current head cell position and, current headCell to newPosition
    

snakeTrail is array of cell coordinate objects


//Tasks
1. cellSize variable should be set from js
2. long snakes could have points to move on their tail 
3. noHit mode just boxShadows when overlapping
4. turbo functionality
5. golden apple functionality
5. turbo apple 
5. different color snakes
6. snake head styling
7. spaw lots of foods functionality
8. gradually speedup
9. track points 
10. names of snake
11. biggerboard
12. catchback functionality spawn food near loosing snake
13. total score achivements
14. points shop
15. mouse movement left click / right click 
16. stick achivements to user profile, everyone loves stickers

12.no hit mode
    in given time who will eat the most

13.shrink Zone mode
    zone shrinks and on every boundary hit you loose one cell

14.hit mode 
    like in slither io

