//=================================== Tasks
innerHtml insertAdjacentHTML moashore DONE
ukan unda gadmoyves username roca chatidan gamodis DONE
validacia chatshi saxelis gareshe ver unda shediodes DONE
chemi da sxvisi mesijebi sxvadasxvanairad unda ifiltrebodes DONE

getter ebze gadaakete static fieldebi
pirdapir chatis linkze access ar unda qondes
ramdeni player ia shemosuli DONE
kodis shelamazeba 
weback build

//=================================== Q/A
Q: am I gvinig data to component correctly?
  A: idk
Q: can I give data to component in props maybe object
  A: in lit-element you can
Q: using Id's in web component styling
  A: no problem

Q: room-card event
  A: throwing custom elements to bind data from child to parent
Q: custom element event bubble up
  A: event won't bubble up by default if respective option is not assgined
Q: cannot read attribute set on custom element <room-card href="/chat">
  A: you have to declare it inside component to access like that
Q: connectedcallback doesnot see DOM
  A:yea, you would better read liveCycle of lit-element


Q: getting data of slotted element this.shadowRoot.getElementById('mode').assignedNodes()[0].data is there any fancier method?
Q: can I make mongo query not async? so I wont need to use .then
Q: alter .then with await?
Q: global styles override component styles * margin


//=================================== Q/A Codes
Q: LIMIT DOESNOT WORK LIKE this
let cursor = await collection.aggregate({
      "$match": {
        room: room
      }
    },
    {
      "$project": {
        chatHistory: 1,
        _id: 0
      }
    },
    {
      "$unwind": "$chatHistory"
    },
    {
      "$limit": 2
    })
A: it just needed [] square brackets to make limit stage work!!!

//=================================== Modified working code 

       let renderMessage = (messages) => {

            messages.forEach((msg)=>{
                let msgDiv = document.createElement('user-message');
                msgDiv.props = msg;
                messagesDiv.appendChild(msgDiv);
            })
        }
    }

//sisulelea chatHistory array sul icvleba da shen mainc bolodan 10 15 20 .. poziciidan amokrefili elementebi mogaq
    {
      "$project": {
        "message": {
          "$slice": ["$chatHistory",-limit*timesBack, { "$cond": [{ $gt: [limit*timesBack, {"$size": "$chatHistory"} ]},null,limit] }]
           //$$!! if position is more then array elements empty array is returned, we loose some starting messages
        },
        _id: 0
      }
    },
//igivea sulelo arraySize icvleba da oriveshemtxvevashi magaze damokidebuli xar
{
    "$project": {
    "message": {
        "$slice": ["$chatHistory",{"$subtract":[{"$size":"$chatHistory"},limit*timesBack]}, { "$cond": [{ $gt: [limit*timesBack, {"$size": "$chatHistory"} ]},null,limit] }]
        //$$!! if position is more then array elements empty array is returned, we loose some starting messages
    },
    _id: 0
    }
},

//ramenairad pirveli getMessages dros (join rocaxdeba) magdrois chatHistory size unda sheinaxo yvela useristvis shesabamisi
da shemdeg am cvladis mixedvit ukan ukan gadmoxvide poziciebi
//gmerto shenmishvele rato vitanjav tavs, ase mushaobs magram bagi aqvs sul magla amosvlisas
  "message": {
          "$slice": ["$chatHistory",loadPos, { "$cond": [{ $gt: [limit*timesBack, {"$size": "$chatHistory"} ]},null,limit] }]
           //$$!! if position is more then array elements empty array is returned, we loose some starting messages
        },
        _id: 0
      }

//----------------------------------------------------------------------

//Q: Updates with Aggregation Pipeline, aq update shi agregacia ro gavushvat da ramenairad historySize vtenot ar sheidzleba?
  await collection.updateOne({room: room}, 
    { 
        $push: { 
          activeUsers: {
            id:id,
            userName:userName,
            room:room,
            "$set":{historySize:{$"size":"$chatHistory"}}
          }
        }
    },{upsert:true})
}

//=================================== Removed codes

//emit all messages to client, check for userData and send its details also 
    // response.forEach(msg => {
    //   socket.emit('chatMessage',createMessage(message.user, message.text, message.date)); 
    // });

//send data to web component
    //method: 3 give it through props
    msgDiv.props = msgProps;
    /*    
    //method: 1 give it through custom html data attributes
    // setAttributes(msgDiv, {
    //     'data-userimg': msgProps.img,
    //     'data-username': msgProps.name,
    //     'data-usermsg': msgProps.text,
    //     'data-msgdate': msgProps.date,
    // })
        
    //method: 2 give it thorugh slots
    // msgDiv.innerHTML =` 
    //     <slot name="userImg"></slot>
    //    P <slot name="msgText">${msg}</slot>
    //     <slot name="msgDate"></slot>    
    // `;
    */

//navigator buttons
    document.getElementsByName('route-link).forEach(element=>{
        element.addEventListener('click',(event)=>{
                event.preventDefault();
                App.navigateTo(event.currentTarget.href)
            }
        )
    })

//dispatching custom event
    this.addEventListener('click', ()=>{
        let event = new CustomEvent('route-click', {
            detail: {
                gameMode: this.shadowRoot.getElementById('mode').assignedNodes()[0].data
            }
            });
            this.dispatchEvent(event);
    })
    
//set routes to component

    <a href="/chat" name="route-link" >
        <room-card >Time Mode</room-card>
    </a>
    <a href="/chat" name="route-link" >
        <room-card >Hit Mode</room-card>
    </a>
    <a href="/chat" name="route-link" >
        <room-card >Eat Mode</room-card>
    </a>

    <room-card href="/chat" name="route-link" >Time Mode</room-card>
    <room-card href="/chat" name="route-link" >Hit Mode</room-card>
    <room-card href="/chat" name="route-link" >Eat Mode</room-card>

//shorthand object implementation is confusing for debugging    
.updateOne({room: room}, 
    { 
        $push: { 
          activeUsers: {
            id, userName, room  //this is shorthand, it will make given variables as object field names
          }
        }
    },{upsert:true})

//==================== Achived functions
    const setAttributes = (element, attributesObject) => {
        console.log(attributesObject);
        for (var key in attributesObject) {
            element.setAttribute(key, attributesObject[key]);
        }
    }